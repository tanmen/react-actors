{"version":3,"file":"main.2a14bc73.iframe.bundle.js","mappings":";;;AAwEA;;;;AAKA;;;;AAOA;AACA;AACA;AACA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;;AAMA;;;;;;;;AAUA;AACA;;;AC1EA;AACA;AAGA;AACA;;;;;;ACjBA;AACA;;AAEA;;;;;AAKA;AACA;;;;AAIA;;;AAGA;;;;;;ACrBA;;AAEA;AACA;;AAEA;;;;;;AAMA;;;;;AAKA;;;;;;AChBA;;;AAGA;;;;;AAKA;;;;;;;;ACKA;;AAEA;;AAEA;;;;;AAKA;AACA;;;;AAIA;;AAEA;;;;ACtBA;;;;;AAMA;;;;;AAQA;;;;;;AAOA;AACA;;AAEA;;;;;;AAMA;AACA;;;;AAIA;;;AAGA;;;;AChEA;;;;AAKA;;;;;;;;;;;ACQA;;;;;AAOA;;;;;;;;;AASA;AACA;AACA;;;;;;;;;;AChBA;;;;;;;;;AAWA;;;AAGA;AACA;AACA;;;;;;;;ACpBA;;;AAGA;;;;;;;;;;;AAaA;;;;;AAOA;;;ACRA;AACA;AACA;;;;AAMA;AACA;;AAIA;;;AAKA;;;;;;;;;;;;;;;ACbA;;;;;;;;;;;;;;ACUA;;;;;AAOA;;AAEA;;;AAGA;;;;AAIA;;;;;;;AASA","sources":["webpack://react-actors/./src/buttons/Button/Button.tsx","webpack://react-actors/./src/images/Image/Image.tsx","webpack://react-actors/./src/inputs/Input/Input.tsx","webpack://react-actors/./src/inputs/InputGroup/InputAddition.tsx","webpack://react-actors/./src/inputs/InputGroup/InputGroup.tsx","webpack://react-actors/./src/inputs/Select/Select.tsx","webpack://react-actors/./src/inputs/Textarea/Textarea.tsx","webpack://react-actors/./src/inputs/styles.ts","webpack://react-actors/./src/loadings/CircleLoading/CircleLoading.tsx","webpack://react-actors/./src/loadings/LineLoading/LineLoading.tsx","webpack://react-actors/./src/loadings/SkeletonLoading/SkeletonLoading.tsx","webpack://react-actors/./src/modals/Modal/Modal.tsx","webpack://react-actors/./src/providers/ModalProvider/ModalProvider.tsx","webpack://react-actors/./src/tables/Table/Table.tsx"],"sourcesContent":["import {css} from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport Color from \"color-js\";\nimport {ButtonHTMLAttributes, FC, MouseEvent, ReactNode, useEffect, useState} from \"react\";\nimport {useTheme} from \"../../hooks\";\nimport {LineLoading} from \"../../loadings\";\nimport {ThemeProp} from \"../../providers\";\nimport {ColorType, SizeStyles, SizeType} from \"../../types\";\nimport {extractSizeStyle} from \"../../utils\";\n\ntype CustomProps = {\n  children?: ReactNode,\n  type?: 'submit' | 'reset' | 'button';\n  disabled?: boolean;\n  loading?: boolean;\n  size?: SizeType;\n  color?: ColorType;\n  className?: string;\n  onClick?: (event: MouseEvent<HTMLButtonElement>) => Promise<any> | any;\n}\n\nexport type ButtonProps = Omit<ButtonHTMLAttributes<HTMLButtonElement>, keyof CustomProps> & CustomProps;\nexport const Button: FC<ButtonProps> =\n  ({\n     children,\n     loading,\n     color = 'primary',\n     size = 'normal',\n     disabled,\n     type = 'button',\n     className,\n     onClick,\n     ...props\n   }) => {\n    const theme = useTheme(color);\n    const [_loading, setLoading] = useState(false);\n    const handleClick = (event: MouseEvent<HTMLButtonElement>) => {\n      if (!onClick) {\n        return;\n      }\n      const reaction = onClick(event);\n      if (reaction instanceof Promise && loading === undefined) {\n        setLoading(true);\n        reaction.finally(() => setLoading(false));\n      }\n    };\n\n    useEffect(() => {\n      setLoading(loading || false);\n    }, [loading]);\n\n    return <Style\n      className={className}\n      theme={theme}\n      sizeType={size}\n      type={type}\n      disabled={disabled}\n      onClick={handleClick}\n      {...props}\n    >\n      <Box>\n        {_loading && <Loading/>}\n        <Content disabled={_loading}>{children}</Content>\n      </Box>\n    </Style>;\n  };\n\nconst styles: SizeStyles = {\n  normal: css`\n    padding: .375rem .75rem;\n    border-radius: .25rem;\n  `,\n  small: css`\n    padding: .25rem .5rem;\n    font-size: .875rem;\n    line-height: 1.5;\n    border-radius: .2rem;`,\n  large: css`\n    padding: .5rem 1rem;\n    font-size: 1.25rem;\n    line-height: 1.5;\n    border-radius: .3rem;`\n};\n\nconst Style = styled.button<{ sizeType: SizeType, theme: ThemeProp; }>(({theme: {font, background, border}}) => css`\n  color: ${font};\n  background-color: ${background};\n  border-color: ${border};\n  font-weight: 700;\n  word-break: keep-all;\n  transition: color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out;\n\n  &:disabled {\n    opacity: .6;\n    cursor: not-allowed;\n  }\n\n  &:focus {\n    outline: 0 #fff;\n    background-color: ${Color(background).darkenByRatio(0.2).toCSS()};\n    border-color: ${Color(border).darkenByRatio(0.2).toCSS()};\n    box-shadow: 0 0 0 0.2rem ${Color(border).lightenByRatio(0.2).setAlpha(0.5).toCSS()};\n  }`, extractSizeStyle(styles));\n\nconst Box = styled.div`\n  position: relative;\n`;\n\nconst Loading = styled(LineLoading)`\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  font-size: 1.25em;\n`;\n\nconst Content = styled.p<{ disabled?: boolean; }>`\n  opacity: ${({disabled}) => disabled ? 0 : 1};\n  transition: opacity .15s ease-in-out;\n`;\n","import styled from \"@emotion/styled\";\nimport {FC, useEffect, useState} from \"react\";\nimport {SkeletonLoading} from \"../../loadings\";\nimport {StyleProps} from \"../../types\";\n\nexport interface Props extends StyleProps {\n  src: string;\n  width: string | number;\n  height: string | number;\n  alt?: string;\n  empty?: string;\n}\n\nexport const Image: FC<Props> = ({src, alt, empty, width, height, className, style}) => {\n  const [error, setError] = useState(false);\n  const [load, setLoad] = useState(true);\n\n  useEffect(() => {\n    setError(false);\n    setLoad(true);\n  }, [src]);\n\n  return <Box width={width} height={height} className={className} style={style}>\n    {load ? <SkeletonLoading style={{\n      width: typeof width === 'number' ? `${width}px` : width,\n      height: typeof height === 'number' ? `${height}px` : height\n    }}/> : null}\n    <Img\n      className=\"img\"\n      load={load}\n      width={width}\n      height={height}\n      src={!error ? src : empty}\n      onLoadCapture={() => setLoad(true)}\n      onLoad={() => setLoad(false)}\n      onError={() => {\n        setError(true);\n        setLoad(false);\n      }}\n      alt={alt}\n    />\n  </Box>;\n};\n\nconst Box = styled.div<{ width: string | number, height: string | number; }>`\n  width: ${({width}) => typeof width === 'number' ? `${width}px` : width};\n  height: ${({height}) => typeof height === 'number' ? `${height}px` : height};\n`;\n\nconst Img = styled.img<{ load: boolean }>`\n  display: ${({load}) => load ? 'none' : 'block'};\n`;\n\n","import {css} from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport classnames from \"classnames\";\nimport Color from \"color-js/color\";\nimport {DetailedHTMLProps, FC, ForwardedRef, forwardRef, InputHTMLAttributes} from \"react\";\nimport {useTheme} from \"../../hooks\";\nimport {ThemeProp} from \"../../providers\";\nimport {SizeType} from \"../../types\";\nimport {extractSizeStyle} from \"../../utils\";\nimport {classnameItem} from \"../InputGroup\";\nimport {inputStyles} from \"../styles\";\n\nexport type InputProps = Omit<DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, 'size'> & {\n  ref?: ForwardedRef<HTMLInputElement>;\n  size?: SizeType;\n  error?: boolean;\n}\n\nexport const Input: FC<InputProps> = forwardRef<HTMLInputElement, InputProps>(\n  ({className, size = 'normal', error, ...props}, ref) => {\n    const theme = useTheme('normal');\n    const errorTheme = useTheme('danger');\n    return <SInput {...props} error={error} className={classnames('actors-input', classnameItem, className)} ref={ref}\n                   sizeType={size}\n                   theme={theme} errorTheme={errorTheme}/>;\n  });\n\nconst SInput = styled.input<{ sizeType: SizeType; theme: ThemeProp; errorTheme: ThemeProp; error?: boolean }>(\n  ({theme: {font, background, border}, errorTheme, error}) => css`\n    display: block;\n    width: 100%;\n    font-weight: 400;\n    line-height: 1.5;\n    color: ${font};\n    background-color: ${background};\n    background-clip: padding-box;\n    border: 1px solid ${error ? errorTheme.border : border};\n    transition: border-color .15s ease-in-out, box-shadow .15s ease-in-out;\n\n    &:focus {\n      outline: 0;\n      border-color: ${error ? errorTheme.border : border};\n      box-shadow: 0 0 0 .2rem ${Color(error ? errorTheme.border : border).setAlpha(0.5).toCSS()};\n    }\n\n    &:disabled {\n      background-color: ${error ? errorTheme.border : border};\n      cursor: not-allowed;\n    }\n  `, extractSizeStyle(inputStyles));\n","import {css} from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport classnames from \"classnames\";\nimport {FC, ReactNode} from \"react\";\nimport {useTheme} from \"../../hooks\";\nimport {ThemeProp} from \"../../providers\";\nimport {SizeType, StyleProps} from \"../../types\";\nimport {extractSizeStyle} from \"../../utils\";\nimport {inputStyles} from \"../styles\";\nimport {classnameGroup, classnameItem} from \"./InputGroup\";\n\nexport type InputAdditionProps = {\n  size?: SizeType;\n  children?: ReactNode;\n} & StyleProps;\n\nexport const InputAddition: FC<InputAdditionProps> = ({size = 'normal', className, style, children}) => {\n  const theme = useTheme('secondary');\n  return <Style sizeType={size} className={classnames('actors-input-addition', classnameItem, className)} style={style}\n                theme={theme}>{children}</Style>;\n};\n\nconst Style = styled.div<{ sizeType: SizeType, theme: ThemeProp }>(({theme: {font, background, border}}) => css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-weight: 400;\n  line-height: 1.5;\n  color: ${font};\n  white-space: nowrap;\n  background-color: ${background};\n  border: 1px solid ${border};\n\n  .${classnameGroup} > .${classnameItem}:not(:first-of-type) {\n    margin-left: -1px;\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n  }\n\n  .${classnameGroup} > .${classnameItem}:not(:last-of-type) {\n    margin-right: -1px;\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n  }\n`, extractSizeStyle(inputStyles));\n\n","import styled from \"@emotion/styled\";\nimport classnames from 'classnames';\nimport Color from \"color-js/color\";\nimport {FC, ReactNode} from \"react\";\nimport {useTheme} from \"../../hooks\";\nimport {ThemeProp} from \"../../providers\";\nimport {StyleProps} from \"../../types\";\n\nexport const classnameGroup = 'actors-input-group';\nexport const classnameItem = 'actors-input-item';\n\nexport interface InputGroupProps extends StyleProps {\n  error?: boolean;\n  children?: ReactNode;\n}\n\nexport const InputGroup: FC<InputGroupProps> = ({className, style, error, children}) => {\n  const theme = useTheme('danger');\n  return <Group className={classnames([className, classnameGroup, {error}])} theme={theme}\n                style={style}>{children}</Group>;\n};\n\nconst Group = styled.div<{ theme: ThemeProp }>`\n  width: 100%;\n  display: flex;\n  border-radius: .25rem;\n\n  &.error {\n    box-shadow: 0 0 0 .2rem ${({theme: {border}}) => Color(border).setAlpha(0.75).toCSS()};\n  }\n\n  & > .${classnameItem}:not(:first-child) /* emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason */ {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n  }\n\n  & > .${classnameItem}:not(:last-child) /* emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason */ {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n  }\n`;\n","import {css} from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport classnames from \"classnames\";\nimport Color from \"color-js\";\nimport {DetailedHTMLProps, FC, ForwardedRef, forwardRef, SelectHTMLAttributes} from \"react\";\nimport {useTheme} from \"../../hooks\";\nimport {ThemeProp} from \"../../providers\";\nimport {SizeType} from \"../../types\";\nimport {extractSizeStyle} from \"../../utils\";\nimport {classnameItem} from \"../InputGroup\";\nimport {inputStyles} from \"../styles\";\n\nexport type SelectProps =\n  Omit<DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>, 'size'> & {\n  ref?: ForwardedRef<HTMLSelectElement>;\n  size?: SizeType;\n  error?: boolean;\n}\n\nexport const Select: FC<SelectProps> =\n  forwardRef<HTMLSelectElement, SelectProps>(({className, size = 'normal', error, children, ...props}, ref) => {\n    const theme = useTheme('normal');\n    const errorTheme = useTheme('danger');\n    return <SSelect\n      {...props}\n      className={classnames('actors-select', classnameItem, className)}\n      ref={ref}\n      sizeType={size}\n      error={error}\n      theme={theme}\n      errorTheme={errorTheme}\n    >\n      {children}\n    </SSelect>;\n  });\n\nconst SSelect = styled.select<{ sizeType: SizeType; error?: boolean; theme: ThemeProp; errorTheme: ThemeProp; }>(\n  ({theme: {font, background, border}, error, errorTheme}) => css`\n    display: block;\n    width: 100%;\n    font-weight: 400;\n    color: ${font};\n    line-height: 1.5;\n    background-color: ${background};\n    background-clip: padding-box;\n    border: 1px solid ${error ? errorTheme.border : border};\n    transition: border-color .15s ease-in-out, box-shadow .15s ease-in-out;\n\n    &:focus {\n      outline: 0;\n      border-color: ${error ? errorTheme.border : border};\n      box-shadow: 0 0 0 .2rem ${Color(error ? errorTheme.border : border).setAlpha(0.5).toCSS()};\n    }\n\n    &:disabled {\n      background-color: ${error ? errorTheme.border : border};\n      cursor: not-allowed;\n    }`, extractSizeStyle(inputStyles), css`padding-right: 1.75rem;`);\n","import {css} from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport Color from \"color-js\";\nimport {DetailedHTMLProps, FC, ForwardedRef, forwardRef, TextareaHTMLAttributes} from \"react\";\nimport {useTheme} from \"../../hooks\";\nimport {ThemeProp} from \"../../providers\";\nimport {SizeStyles, SizeType} from \"../../types\";\nimport {extractSizeStyle} from \"../../utils\";\n\nexport type TextareaProps =\n  Omit<DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>, 'size'> & {\n  ref?: ForwardedRef<HTMLTextAreaElement>;\n  size?: SizeType;\n  error?: boolean;\n};\n\nexport const Textarea: FC<TextareaProps> = forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({rows = 3, size = \"normal\", error, ...props}, ref) => {\n    const theme = useTheme('normal');\n    const errorTheme = useTheme('danger');\n    return <StyledTextarea\n      rows={rows}\n      sizeType={size}\n      error={error}\n      theme={theme}\n      errorTheme={errorTheme}\n      ref={ref} {...props}/>;\n  });\n\nconst styles: SizeStyles = {\n  normal: css`\n    padding: .375rem .5rem;\n    font-size: 1rem;\n    border-radius: .25rem;\n  `,\n  small: css`\n    padding: .25rem .25rem;\n    font-size: .875rem;\n    line-height: 1.5;\n    border-radius: .2rem;\n  `,\n  large: css`\n    padding: .5rem .75rem;\n    font-size: 1.25rem;\n    line-height: 1.5;\n    border-radius: .3rem;\n  `,\n};\n\nconst StyledTextarea = styled.textarea<{ sizeType: SizeType; error?: boolean; theme: ThemeProp; errorTheme: ThemeProp; }>(\n  ({theme: {font, background, border}, errorTheme, error}) => css`\n    display: block;\n    width: 100%;\n    padding: .375rem .75rem;\n    font-size: 1rem;\n    line-height: 1.5;\n    color: ${font};\n    background-color: ${background};\n    background-clip: padding-box;\n    border: 1px solid ${error ? errorTheme.border : border};\n    border-radius: .25rem;\n    transition: border-color .15s ease-in-out, box-shadow .15s ease-in-out;\n\n    &:focus {\n      outline: 0;\n      border-color: ${error ? errorTheme.border : border};\n      box-shadow: 0 0 0 .2rem ${Color(error ? errorTheme.border : border).setAlpha(0.5).toCSS()};\n    }\n\n    &:disabled {\n      background-color: ${error ? errorTheme.border : border};\n      cursor: not-allowed;\n    }\n  `, extractSizeStyle(styles));\n","import {css} from \"@emotion/react\";\nimport {SizeStyles} from \"../types\";\n\nexport const inputStyles: SizeStyles = {\n  normal: css`\n    padding: .375rem .5rem;\n    font-size: 1rem;\n    border-radius: .25rem;\n  `,\n  small: css`\n    padding: .25rem .25rem;\n    font-size: .875rem;\n    border-radius: .2rem;\n  `,\n  large: css`\n    padding: .5rem .75rem;\n    font-size: 1.25rem;\n    border-radius: .3rem;\n  `,\n};\n","import {keyframes} from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport {FC} from \"react\";\nimport {useMode} from \"../../hooks\";\nimport {ModeType, StyleProps} from \"../../types\";\n\nexport const CircleLoading: FC<StyleProps> = ({className, style}) => {\n  const mode = useMode();\n  return <RingBox className={className} style={style}>\n    {[...Array(4)].map(((_, index) => <Ring key={index} mode={mode} delay={-0.45 + index * 0.15}/>))}\n  </RingBox>;\n};\n\nconst animation = keyframes`\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n`;\n\nconst RingBox = styled.div`\n  display: inline-block;\n  position: relative;\n  width: 1em;\n  height: 1em;\n`;\n\nconst Ring = styled.div<{ delay: number, mode: ModeType }>`\n  box-sizing: border-box;\n  display: block;\n  position: absolute;\n  width: .8em;\n  height: .8em;\n  margin: .1em;\n  border: .1em solid;\n  border-radius: 50%;\n  animation: ${animation} 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\n  border-color: ${({mode}) => mode === 'dark' ? '#fff' : '#aaa'} transparent transparent transparent;\n  animation-delay: ${({delay}) => delay}s;\n`;\n\n","import {keyframes} from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport {FC} from \"react\";\nimport {useMode} from \"../../hooks\";\nimport {ModeType, StyleProps} from \"../../types\";\n\nexport const LineLoading: FC<StyleProps> = ({className, style}) => {\n  const mode = useMode();\n  return <Box className={className} style={style}>\n    {[...Array(3)].map((_, index) => <Line key={index} mode={mode} delay={0.32 - index * 0.16}/>)}\n  </Box>;\n}\n\nconst animation = keyframes`\n  0%,\n  80%,\n  100% {\n    height: .6em;\n  }\n  40% {\n    height: 1em;\n  }\n`;\n\nconst Box = styled.div`\n  display: flex;\n  align-items: center;\n  height: 1em;\n  width: 1em;\n\n  & > div + div {\n    margin-left: .2em;\n  }\n`\n\nconst Line = styled.div<{ delay: number, mode: ModeType }>`\n  width: .2em;\n  height: .75em;\n  background-color: ${({mode}) => mode === 'dark' ? '#fff' : '#aaa'};\n  animation: ${animation} 1s ease-in-out infinite;\n  animation-delay: -${({delay}) => delay}s;\n`;\n","import {keyframes} from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport {FC} from \"react\";\nimport {useMode} from \"../../hooks\";\nimport {ModeType, StyleProps} from \"../../types\";\n\nexport const SkeletonLoading: FC<StyleProps> = (props) => {\n  const mode = useMode();\n  return <Skeleton {...props} mode={mode}/>;\n};\n\nconst animation = keyframes`\n  0% {\n    transform: translateX(-100%)\n  }\n  100% {\n    transform: translateX(100%)\n  }\n`;\n\nconst Skeleton = styled.div<{ mode: ModeType }>`\n  width: 100%;\n  height: 100%;\n  background: ${({mode}) => mode === 'dark'\n          ? 'rgba(255, 255, 255, 0.13)'\n          : 'rgba(0, 0, 0, 0.13)'};\n  position: relative;\n  overflow: hidden;\n\n  &::before {\n    content: '';\n    display: block;\n    height: 100%;\n    width: 100%;\n    background: linear-gradient(90deg,\n    transparent,\n    ${({mode}) => mode === 'dark'\n            ? 'rgba(255, 255, 255, 0.08)'\n            : 'rgba(0, 0, 0, 0.08)'},\n    transparent);\n    position: absolute;\n    top: 0;\n    left: 0;\n    animation: ${animation} 1.2s linear infinite;\n  }\n`;\n","import {css} from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport {FC, ReactNode} from \"react\";\nimport {Button, ButtonProps} from \"../../buttons\";\nimport {useTheme} from \"../../hooks\";\nimport {ThemeProp} from \"../../providers\";\n\nexport type ModalProps = {\n  title?: ReactNode;\n  text: ReactNode;\n  actions?: ({ text: string } & ButtonProps)[]\n  onClose: () => void\n}\n\nexport const Modal: FC<ModalProps> = ({title, text, actions, onClose}) => {\n  const theme = useTheme('normal');\n  return <Wrapper theme={theme}>\n    {title && <Title theme={theme}>{title}</Title>}\n    <Content>\n      {text}\n    </Content>\n    {actions && <ActionContent>\n      {actions.map(({text, onClick, ...props}) =>\n        <Button\n          key={text}\n          onClick={async e => {\n            e.preventDefault();\n            await onClick?.(e);\n            onClose();\n          }} {...props}>{text}</Button>)}\n    </ActionContent>}\n  </Wrapper>;\n};\n\nconst Wrapper = styled.div<{ theme: ThemeProp; }>(({theme: {font, background, border}}) => css`\n  color: ${font};\n  background-color: ${background};\n  border-color: 1px solid ${border};\n  font-weight: 700;\n  word-break: keep-all;\n  border-radius: .25rem;\n`);\n\nconst Title = styled.h2<{ theme: ThemeProp }>(({theme: {border}}) => css`\n  border-bottom: 1px solid ${border};\n  padding: .375rem .75rem;\n`);\n\nconst Content = styled.pre`\n  padding: .375rem .75rem;\n  min-height: 4rem;\n`;\n\nconst ActionContent = styled.div`\n  display: flex;\n  justify-content: center;\n  gap: .75rem;\n  padding: .75rem;\n`;\n","import styled from \"@emotion/styled\";\nimport {createContext, FC, ReactNode, useState} from \"react\";\nimport {Modal, ModalProps} from \"../../modals\";\n\nexport const ModalContext = createContext({\n  show: (_props: Omit<ModalProps, 'onClose'> | null) => {},\n});\n\nexport type ModalProviderProps = {\n  modal?: FC<ModalProps>\n  children: ReactNode\n}\n\nexport const ModalProvider: FC<ModalProviderProps> = ({modal: Element = Modal, children}) => {\n  const [props, setProps] = useState<Omit<ModalProps, 'onClose'> | null>(null);\n  return <ModalContext.Provider value={{show: (props: Omit<ModalProps, 'onClose'> | null) => setProps(props)}}>\n    {children}\n    {props && <div>\n      <ModalContent onClick={() => setProps(null)}>\n        <div onClick={e => e.stopPropagation()}>\n          <Element {...props} onClose={() => setProps(null)}/>\n        </div>\n      </ModalContent>\n      <Background/>\n    </div>}\n  </ModalContext.Provider>;\n};\n\nconst ModalContent = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000010;\n`\n\nconst Background = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  opacity: .5;\n  background-color: #000;\n  z-index: 1000000;\n`\n","import styled from \"@emotion/styled\";\nimport {FC, MouseEvent, ReactNode} from \"react\";\nimport {useMode} from \"../../hooks\";\nimport {ModeType} from \"../../types\";\n\ntype Align = 'right' | 'left' | 'center';\ntype Column<T extends DataModel, K extends keyof T = keyof T> = {\n  Header: ReactNode,\n  accessor: K,\n  headerAlign?: Align\n  align?: Align\n  Wrapper?: FC<{ data: T, accessor: K, align: Align, value: T[K], children: ReactNode }>\n  onClick?: (props: { data: T, accessor: K, value: T[K] }, event: MouseEvent) => Promise<any> | any\n}\ntype DataModel = { [key: string]: ReactNode };\nexport type TableProps<T extends DataModel> = {\n  columns: Column<T>[],\n  data: T[],\n  className?: string,\n  onClick?: (value: T, event: MouseEvent) => Promise<any> | any\n}\n\nexport const Table =\n  <T extends DataModel>({columns, data, className, onClick}: TableProps<T>): ReturnType<FC<TableProps<T>>> => {\n    const mode = useMode();\n    return <STable className={className}>\n      <thead>\n      <tr>\n        {columns.map(({Header, accessor, headerAlign}) => <Th key={accessor.toString()} align={headerAlign ?? 'left'} mode={mode}>{Header}</Th>)}\n      </tr>\n      </thead>\n      <tbody>\n      {data.map((row, index) =>\n        <Tr key={index} className={onClick ? 'clickable' : ''} onClick={onClick ? (e) => onClick(row, e) : undefined}>\n          {columns.map(({Wrapper, accessor, align = 'left', onClick: onCellClick}) =>\n            <Td key={[index, accessor].join('-')} mode={mode} align={align} className={onCellClick ? 'clickable' : ''}\n                onClick={onCellClick ? (e) => onCellClick({data: row, accessor, value: row[accessor]}, e) : undefined}>\n              {Wrapper ? <Wrapper data={row} accessor={accessor} align={align} value={row[accessor]}>\n                {row[accessor]}\n              </Wrapper> : <>{row[accessor]}</>}\n            </Td>)}\n        </Tr>)}\n      </tbody>\n    </STable>;\n  };\n\nconst STable = styled.table`\n  border-collapse: collapse;\n`;\n\nconst Tr = styled.tr`\n  &.clickable:hover {\n    cursor: pointer;\n    background-color: rgba(0, 0, 0, .1);\n  }\n`;\n\nconst Td = styled.td<{ mode: ModeType, align: Align }>`\n  padding: .5rem;\n  text-align: ${({align}) => align};\n\n  tbody > tr:not(:last-of-type) > & {\n    border-bottom: 1px solid ${({mode}) => mode === 'light' ? '#dee2e6' : '#464b4f'};\n  }\n\n  thead > tr > & {\n    border-bottom: 1px solid ${({mode}) => mode === 'light' ? '#212529' : '#fff'};\n  }\n\n  &.clickable:hover {\n    cursor: pointer;\n    background-color: rgba(0, 0, 0, .1);\n  }\n`;\n\nconst Th = styled(Td.withComponent('th'))`\n  text-align: match-parent;\n`;\n"],"names":[],"sourceRoot":""}