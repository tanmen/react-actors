{"version":3,"file":"providers-ModalProvider-ModalProvider-stories.d0095368.iframe.bundle.js","mappings":";;;;;;;;;;AAwCA;;;;;;;;;;;;;ACRA;AACA;AACA;;;;AAMA;AACA;;AAIA;;;AAKA","sources":["webpack://react-actors/./src/providers/ModalProvider/ModalProvider.tsx","webpack://react-actors/./src/modals/Modal/Modal.tsx"],"sourcesContent":["import styled from \"@emotion/styled\";\nimport {createContext, FC, ReactNode, useState} from \"react\";\nimport {Modal, ModalProps} from \"../../modals\";\n\nexport const ModalContext = createContext({\n  show: (_props: ModalProps | null) => {},\n});\n\nexport type ModalProviderProps = {\n  modal: FC<ModalProps>\n  children: ReactNode\n}\n\nexport const ModalProvider: FC<ModalProviderProps> = ({modal: Element = Modal, children}) => {\n  const [props, setProps] = useState<ModalProps | null>(null);\n  return <ModalContext.Provider value={{show: (props: ModalProps | null) => setProps(props)}}>\n    {children}\n    {props && <div>\n      <ModalContent onClick={() => setProps(null)}>\n        <div onClick={e => e.stopPropagation()}>\n          <Element {...props} onClose={() => setProps(null)}/>\n        </div>\n      </ModalContent>\n      <Background/>\n    </div>}\n  </ModalContext.Provider>;\n};\n\nconst ModalContent = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000010;\n`\n\nconst Background = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  opacity: .5;\n  background-color: #000;\n  z-index: 1000000;\n`\n","import {css} from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport {FC, ReactNode} from \"react\";\nimport {Button, ButtonProps} from \"../../buttons\";\nimport {useTheme} from \"../../hooks\";\nimport {ThemeProp} from \"../../providers\";\n\nexport type ModalProps = {\n  title?: ReactNode;\n  text: ReactNode;\n  actions?: ({ text: string } & ButtonProps)[]\n  onClose: () => void\n}\n\nexport const Modal: FC<ModalProps> = ({title, text, actions, onClose}) => {\n  const theme = useTheme('normal');\n  return <Wrapper theme={theme}>\n    {title && <Title theme={theme}>{title}</Title>}\n    <Content>\n      {text}\n    </Content>\n    {actions && <ActionContent onClick={() => onClose()}>\n      {actions.map(({text, onClick,...props}) => <Button key={text}\n                                                         onClick={e => {\n                                                           e.preventDefault();\n                                                           return onClick?.(e);\n                                                         }} {...props}>{text}</Button>)}\n    </ActionContent>}\n  </Wrapper>;\n};\n\nconst Wrapper = styled.div<{ theme: ThemeProp; }>(({theme: {font, background, border}}) => css`\n  color: ${font};\n  background-color: ${background};\n  border-color: ${border};\n  font-weight: 700;\n  word-break: keep-all;\n  border-radius: .25rem;\n`);\n\nconst Title = styled.h2<{ theme: ThemeProp }>(({theme: {border}}) => css`\n  border-bottom: 1px solid ${border};\n  padding: .375rem .75rem;\n`);\n\nconst Content = styled.pre`\n  padding: .375rem .75rem;\n  min-height: 4rem;\n`;\n\nconst ActionContent = styled.div`\n  display: flex;\n  justify-content: center;\n  gap: .75rem;\n  padding: .75rem;\n`;\n"],"names":[],"sourceRoot":""}